services:
  sonarqube:
    image: sonarqube:10.7-community
    ports:
      - "9000:9000"
    environment:
      - SONARQUBE_JDBC_URL=${SONARQUBE_JDBC_URL}
      - SONARQUBE_JDBC_USERNAME=${SONARQUBE_JDBC_USERNAME}
      - SONARQUBE_JDBC_PASSWORD=${SONARQUBE_JDBC_PASSWORD}
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_plugins:/opt/sonarqube/lib/bundled-plugins
      - ./sonar.properties:/opt/sonarqube/conf/sonar.properties
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sonarnet
    restart: always
    ulimits:
      nofile:
        soft: 65536
        hard: 65536

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - sonarnet
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  mcp-server:
    build: ./mcp-server
    ports:
      - "8080:8080"
    environment:
      - STORAGE_PATH=/usr/src/app/storage
      - SONARQUBE_URL=http://sonarqube:9000
      - SONARQUBE_TOKEN=${SONARQUBE_TOKEN}
    volumes:
      - mcp_storage:/usr/src/app/storage
    depends_on:
      - sonarqube
    networks:
      - sonarnet
    restart: always

volumes:
  sonarqube_data:
    name: sonarqube_data
  sonarqube_extensions:
    name: sonarqube_extensions
  sonarqube_plugins:
    name: sonarqube_plugins
  postgresql_data:
    name: postgresql_data
  mcp_storage:
    name: mcp_storage

networks:
  sonarnet:
    driver: bridge
